Recommender functionality
 - add InitModel to ItemRecommender and RatingPredictor
 - BMF: consider to make bold_driver the default
 - automated hyperparameter search
 - add filtering mechanism (pre-filter, post-filter)
 - support for non-binary attributes: real, nominal, textual descriptions
 - directly support MovieLens u.item and u.user files
 - support for more relation types: weighted, ternary, multiple relations
 - additional recommenders
   - memory: just give out ratings in the training set, exception otherwise
   - item-to-item CF (Linden et al., 2003)
   - non-negative matrix factorization
   - matrix factorization learned with alternating least squares/batch gradient descent
   - adaptive kNN by Koren+Bell
   - scalable CF by Koren: http://research.yahoo.com/pub/2435
   - Improved Maximum Margin Matrix Factorization http://www.ci.tuwien.ac.at/~alexis/immmf.pdf
   - Hashing for CF: http://jmlr.csail.mit.edu/proceedings/papers/v9/karatzoglou10a/karatzoglou10a.pdf
   - attribute-based recommenders using LIBSVM
   - Bayesian Probabilistic Matrix Factorization http://www.mit.edu/~rsalakhu/BPMF.html
   - Content-boosted CF http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.73.8546&rep=rep1&type=pdf
   - restricted boltzmann machines
   - http://jmlr.csail.mit.edu/papers/v11/seldin10a.html
 - time-aware rating and item prediction
   - timeSVD++
 - new recommender types: TagRecommender, ContextAwareRecommender, SequentialRecommender
 - ensembles
   - ranking ensembles
   - stacking ensembles
   - ensembles for new users/new items
 - add more content-based routines (using Lemur?)
 - IItemRecommender: add CanPredict(user_id) method
 - evaluation
   - allow new user evaluation for item prediction
   - support different CV protocols: leave-one-out, leave-one-out-per-user, k-fold CV, chronological splits, user-/item-stratified CV
   - support evaluation protocols w/ repeated events
   - faster evaluation routines
     - approximate AUC
     - sample precision@N
   - online update evaluation
 - consider to store the hyperparameters in the model files as well
 - prediction certainty output
Data types
 - data types: introduce more properties
 - profile+optimize data types (using the facilities of Mono 2.10)
 - implement sparse matrices based on binary search
 - sparse matrices: allow explicit deletion of elements
Architecture
 - tests/integration
   - test suite should also run for purely binary installation
 - web APIs
   - integrate with easyrec JavaScript API http://easyrec.org/ 
   - implement features similar to the Strands web service API or Hunch
 - internal APIs
   - interface(s) for recommenders that support online updates
   - user and item IDs should be unsigned integers, not signed integers
   - generic optimization interface and algorithms (like Mallet)
   - consider using simulated multiple inheritance for the attribute-based recommenders:
     http://www.codeproject.com/KB/architecture/smip.aspx
 - data structures
   - IMatrix<T>: add RemoveColumn and RemoveRow methods
   - parameterize types:
     - user and item IDs
     - stored ratings
     - prediction values (in C++ port)
 - recommenders 
   - nicer, more generic structure for kNN recommenders
     - non-weighted kNN
     - more correlation/similarity measures
       - rename to Similarity (instead of Correlation)?
     - combine arbitrary similarity matrices
     - user-defined similarities
     - re-integrate adjusted cosine (port to new rating data structure)
   - slope-one
       - different weighting schemes
 - distributed/parallel computing
   - use Parallel.ForEach for item recommender evaluation
     - as soon as Mono 2.8 is more widely available
   - multi-core support
   - GPU support
   - support for distributed computing
     - check out http://code.google.com/p/qizmt/ and http://mapsharp.codeplex.com/
 - source code organization
   - use one repository per component, instead of having everything in one repository
 - IO and storage
   - save model files using reflection (binary and XML)
   - GZip model files and prediction files (on demand)
GUI demo
 - display a fixed number of movies on the screen, let the user browse
 - tabs
 - info panel (including movie poster, cast, etc.)
 - ability to switch between datasets
 - complete i18n
 - scale up to Netflix
 - store/load user data
 - faster IO
Misc features
 - command-line tools: standalone only for prediction based on model files
 - command-line tools: read from DB
 - command-line tools: time stats for CV
 - command-line tools: give out partial results for t-test etc.
 - rewrite MF techniques using vector/matrix abstractions
 - output a nice table format for evaluation w/ R etc.
Documentation/website
 - document all file formats
 - have documentation for different versions on the website
 - add flyer to homepage (main page)
 - document attribute-aware recommenders: using and implementing
 - (*) document how to set up C# development environment for Ubuntu, Debian, etc.
 - document using MyMediaLite from other languages, implementing recommenders in other languages
   - Java (*), F#, Perl, Clojure, Scala, IronScheme, Boo, Nemerle
   - JavaScript -- https://github.com/fholm/IronJS/ -- wait until Mono 2.8 is more widely available
 - glossary where we explain commonly used terms
